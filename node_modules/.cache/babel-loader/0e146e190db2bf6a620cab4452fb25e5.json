{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nfunction shuffle(array) {\n  let currentIndex = array.length,\n    randomIndex;\n  while (currentIndex != 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n  return array;\n}\nfunction removeDuplicates(array) {\n  return [...new Set(array)];\n}\nconst alphabet = ['й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ', 'ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э', 'ё', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю'];\nexport default {\n  data() {\n    return {\n      words: ['лето', 'пиво', 'кожа', 'пуля'],\n      alph: alphabet,\n      allParts: [],\n      wordsParts: [],\n      wordsSets: {},\n      wordsSets2: []\n    };\n  },\n  mounted() {\n    this.getAllParts();\n    this.getWordsParts();\n  },\n  methods: {\n    getAllParts() {\n      this.allParts = [...this.alph];\n      for (let i = 0; i < this.alph.length; i++) {\n        for (let j = 0; j < this.alph.length; j++) {\n          if (this.alph[i] !== this.alph[j]) {\n            this.allParts.push(`${this.alph[i]}${this.alph[j]}`);\n          }\n        }\n      }\n      this.allParts = shuffle(this.allParts);\n    },\n    getWordsParts() {\n      this.words.forEach(word => {\n        word.split('').forEach(letter => {\n          this.wordsParts.push(letter);\n        });\n        for (let i = 0; i < word.length - 1; i++) {\n          this.wordsParts.push(`${word[i]}${word[i + 1]}`);\n        }\n      });\n      this.wordsParts = removeDuplicates(this.wordsParts);\n      this.getSets();\n    },\n    getSets() {\n      this.words.forEach((word, idx) => {\n        this.wordsSets[word] = [];\n        this.wordsSets2[idx] = {\n          word: word,\n          parts: []\n        };\n        this.wordsParts.forEach(part => {\n          if (word.includes(part)) {\n            this.wordsSets[word].push(part);\n          }\n        });\n        for (let i = 0; i < this.wordsSets[word].length; i++) {\n          for (let j = 0; j < this.wordsSets[word].length; j++) {\n            for (let k = 0; k < this.wordsSets[word].length; k++) {\n              if (i !== j && j !== k) {\n                if (`${this.wordsSets[word][i]}${this.wordsSets[word][j]}${this.wordsSets[word][k]}` === word) {\n                  const arr = [this.wordsSets[word][i], this.wordsSets[word][j], this.wordsSets[word][k]];\n                  this.wordsSets2[idx].parts.push(arr);\n                }\n              }\n            }\n          }\n        }\n      });\n      this.getAllVars();\n    },\n    getAllVars() {\n      let f = [];\n      this.wordsSets2.forEach(word => {\n        for (let i = 0; i < word.parts.length; i++) {\n          f = [...word.parts[i]];\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";AA8FA;EACA;IAAAA;EAEA;IACAA;IACAC;IACA,6CACAC;EACA;EACA;AACA;AACA;EACA;AACA;AACA,kBACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA;AAEA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;IACA;EACA;EACAC;IACAC;MACA;MACA;QACA;UACA;YACA;UACA;QACA;MACA;MACA;IACA;IACAC;MACA;QACAC;UACA;QACA;QACA;UACA;QACA;MACA;MACA;MACA;IACA;IACAC;MACA;QACA;QACA;UAAAD;UAAAE;QAAA;QACA;UACA;YACA;UACA;QACA;QACA;UACA;YACA;cACA;gBACA;kBACA;kBACA;gBACA;cACA;YACA;UACA;QACA;MACA;MACA;IACA;IACAC;MACA;MACA;QACA;UACAC;QACA;MACA;IACA;EACA;AACA","names":["randomIndex","currentIndex","array","data","words","alph","allParts","wordsParts","wordsSets","wordsSets2","mounted","methods","getAllParts","getWordsParts","word","getSets","parts","getAllVars","f"],"sourceRoot":"src","sources":["GeneratorForm.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"form\">\n      <div class=\"row\">\n        <div class=\"col\">Кол-во столбцов</div>\n        <div class=\"col\">\n          <select v-model=\"colsCount\">\n            <template v-for=\"(val, idx) in 10\">\n              <option :value=\"val\" :key=\"idx\">{{ val }}</option>\n            </template>\n          </select>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">Кол-во строк</div>\n        <div class=\"col\">\n          <select v-model=\"rowsCount\">\n            <template v-for=\"(val, idx) in 10\">\n              <option :value=\"val\" :key=\"idx\">{{ val }}</option>\n            </template>\n          </select>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">Кол-во букв в словах</div>\n        <div class=\"col\">\n          <select v-model=\"lettersCount\">\n            <template v-for=\"(val, idx) in [3,4,5]\">\n              <option :value=\"val\" :key=\"idx\">{{ val }}</option>\n            </template>\n          </select>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">Слова</div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          <button @click=\"generate()\">Сгенерировать</button>\n          <button v-if=\"generated.length\" @click=\"toggleAnswers()\" class=\"button__answers\">Ответы</button>\n        </div>\n      </div>\n    </div>\n    <div class=\"result\">\n      <div class=\"phone-ring\">\n        <div class=\"phone-ring__sep\"></div>\n        <div class=\"phone-ring__values\">\n          <div class=\"phone-ring__value phone-ring__value--val0\">\n            <div class=\"phone-ring__value-letters\"></div>\n            <div class=\"phone-ring__value-num\">0</div>\n          </div>\n          <div class=\"phone-ring__value phone-ring__value--val1\">\n            <div class=\"phone-ring__value-letters\"></div>\n            <div class=\"phone-ring__value-num\">1</div>\n          </div>\n          <div class=\"phone-ring__value phone-ring__value--val2\">\n            <div class=\"phone-ring__value-letters\"></div>\n            <div class=\"phone-ring__value-num\">2</div>\n          </div>\n          <div class=\"phone-ring__value phone-ring__value--val3\">\n            <div class=\"phone-ring__value-letters\"></div>\n            <div class=\"phone-ring__value-num\">3</div>\n          </div>\n          <div class=\"phone-ring__value phone-ring__value--val4\">\n            <div class=\"phone-ring__value-letters\"></div>\n            <div class=\"phone-ring__value-num\">4</div>\n          </div>\n          <div class=\"phone-ring__value phone-ring__value--val5\">\n            <div class=\"phone-ring__value-letters\"></div>\n            <div class=\"phone-ring__value-num\">5</div>\n          </div>\n          <div class=\"phone-ring__value phone-ring__value--val6\">\n            <div class=\"phone-ring__value-letters\"></div>\n            <div class=\"phone-ring__value-num\">6</div>\n          </div>\n          <div class=\"phone-ring__value phone-ring__value--val7\">\n            <div class=\"phone-ring__value-letters\"></div>\n            <div class=\"phone-ring__value-num\">7</div>\n          </div>\n          <div class=\"phone-ring__value phone-ring__value--val8\">\n            <div class=\"phone-ring__value-letters\"></div>\n            <div class=\"phone-ring__value-num\">8</div>\n          </div>\n          <div class=\"phone-ring__value phone-ring__value--val9\">\n            <div class=\"phone-ring__value-letters\"></div>\n            <div class=\"phone-ring__value-num\">9</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nfunction shuffle(array) {\n  let currentIndex = array.length,  randomIndex\n\n  while (currentIndex != 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex)\n    currentIndex--\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex], array[currentIndex]]\n  }\n  return array;\n}\nfunction removeDuplicates(array) {\n  return [...new Set(array)];\n}\nconst alphabet = [\n  'й',\n  'ц',\n  'у',\n  'к',\n  'е',\n  'н',\n  'г',\n  'ш',\n  'щ',\n  'з',\n  'х',\n  'ъ',\n  'ф',\n  'ы',\n  'в',\n  'а',\n  'п',\n  'р',\n  'о',\n  'л',\n  'д',\n  'ж',\n  'э',\n  'ё',\n  'я',\n  'ч',\n  'с',\n  'м',\n  'и',\n  'т',\n  'ь',\n  'б',\n  'ю'\n]\n\nexport default {\n  data() {\n    return {\n      words: ['лето', 'пиво', 'кожа', 'пуля'],\n      alph: alphabet,\n      allParts: [],\n      wordsParts: [],\n      wordsSets: {},\n      wordsSets2: []\n    }\n  },\n  mounted() {\n    this.getAllParts()\n    this.getWordsParts()\n  },\n  methods: {\n    getAllParts() {\n      this.allParts = [...this.alph]\n      for (let i = 0; i < this.alph.length; i++) {\n        for (let j = 0; j < this.alph.length; j++) {\n          if (this.alph[i] !== this.alph[j]) {\n            this.allParts.push(`${this.alph[i]}${this.alph[j]}`)\n          }\n        }\n      }\n      this.allParts = shuffle(this.allParts)\n    },\n    getWordsParts() {\n      this.words.forEach((word) => {\n        word.split('').forEach((letter) => {\n          this.wordsParts.push(letter)\n        })\n        for (let i = 0; i < word.length - 1; i++) {\n          this.wordsParts.push(`${word[i]}${word[i+1]}`)\n        }\n      })\n      this.wordsParts = removeDuplicates(this.wordsParts)\n      this.getSets()\n    },\n    getSets() {\n      this.words.forEach((word, idx) => {\n        this.wordsSets[word] = []\n        this.wordsSets2[idx] = { word: word, parts: [] }\n        this.wordsParts.forEach((part) => {\n          if (word.includes(part)) {\n            this.wordsSets[word].push(part)\n          }\n        })\n        for (let i = 0; i < this.wordsSets[word].length; i++) {\n          for (let j = 0; j < this.wordsSets[word].length; j++) {\n            for (let k = 0; k < this.wordsSets[word].length; k++) {\n              if (i !== j && j !== k) {\n                if (`${this.wordsSets[word][i]}${this.wordsSets[word][j]}${this.wordsSets[word][k]}` === word) {\n                  const arr = [this.wordsSets[word][i], this.wordsSets[word][j], this.wordsSets[word][k]]\n                  this.wordsSets2[idx].parts.push(arr)\n                }\n              }\n            }\n          }\n        }\n      })\n      this.getAllVars()\n    },\n    getAllVars() {\n      let f = []\n      this.wordsSets2.forEach((word) => {\n        for (let i = 0; i < word.parts.length; i++ ) {\n          f = [...word.parts[i]]\n        }\n      })\n    }\n  }\n}\n</script>\n<style>\n.form {\n  margin: 0 auto;\n  width: 500px;\n  padding: 24px;\n  border: 1px solid #9f9f9f;\n  border-radius: 6px;\n}\n.row {\n  display: flex;\n  align-items: center;\n  margin-bottom: 12px;\n}\n.row:last-child {\n  margin-bottom: 0;\n}\n.col {\n  flex: 1;\n  text-align: left;\n}\nselect {\n  padding: 4px 6px;\n  width: 80px;\n}\nbutton {\n  border: 1px solid #9f9f9f;\n  padding: 6px 10px;\n  border-radius: 4px;\n}\n.button__answers {\n  margin-left: 16px;\n}\n.phone-ring {\n  width:500px;\n  height: 500px;\n  border-radius: 500px;\n  position: relative;\n  background: pink;\n}\n.phone-ring:after {\n  content: \"\";\n  position: absolute;\n  top:100px;\n  left: 100px;\n  width: 300px;\n  height: 300px;\n  border-radius: 300px;\n  background: white;\n}\n.phone-ring__sep {\n  position: absolute;\n  background: white;\n  width: 100px;\n  height: 60px;\n  bottom: 220px;\n  right: -24px;\n  border-radius: 50px;\n}\n.phone-ring__values {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n.phone-ring__value {\n  width: 80px;\n  height: 80px;\n  border-radius: 80px;\n  background: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n}\n.phone-ring__value--val0 {\n  left: 376px;\n  top: 100px;\n}\n.phone-ring__value--val1 {\n  top: 30px;\n  left: 296px;\n}\n.phone-ring__value--val2 {\n  top: 12px;\n  left: 190px;\n}\n.phone-ring__value--val3 {\n  top: 50px;\n  left: 90px;\n}\n.phone-ring__value--val4 {\n  top: 140px;\n  left: 23px;\n}\n.phone-ring__value--val5 {\n  top: 250px;\n  left: 14px\n}\n.phone-ring__value--val6 {\n  top: 350px;\n  left: 65px;\n}\n.phone-ring__value--val7 {\n  top: 406px;\n  left: 166px;\n}\n.phone-ring__value--val8 {\n  top: 398px;\n  left: 282px;\n}\n.phone-ring__value--val9 {\n  top: 325px;\n  left: 375px;\n}\n.phone-ring__value-letters {}\n.phone-ring__value-num {}\n</style>\n"]},"metadata":{},"sourceType":"module"}